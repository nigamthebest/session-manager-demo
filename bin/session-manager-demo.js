#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionManagerDemoStack = void 0;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
class SessionManagerDemoStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Create VPC
        const vpc = new ec2.Vpc(this, "SessionManagerDemoStackVPC", {
            maxAzs: 2, // Use 2 Availability Zones
            subnetConfiguration: [
                {
                    cidrMask: 24,
                    name: 'ingress',
                    subnetType: ec2.SubnetType.PUBLIC,
                },
                {
                    cidrMask: 24,
                    name: 'application',
                    subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS,
                },
                {
                    cidrMask: 28,
                    name: 'rds',
                    subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
                }
            ]
        });
        // Create IAM role for EC2 instances
        const ec2Role = new iam.Role(this, "EC2Role", {
            assumedBy: new iam.ServicePrincipal("ec2.amazonaws.com"),
        });
        // Attach AmazonSSMManagedInstanceCore managed policy to the IAM role
        ec2Role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonSSMManagedInstanceCore"));
        // Create public subnet and EC2 instance
        const publicSubnet = vpc.publicSubnets[0];
        const publicInstance = new ec2.Instance(this, "PublicInstance", {
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.SMALL),
            machineImage: ec2.MachineImage.latestAmazonLinux2(),
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
            role: ec2Role,
        });
        // Create private subnet and EC2 instance
        const privateSubnet = vpc.privateSubnets[0];
        const privateInstance = new ec2.Instance(this, "PrivateInstance", {
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.SMALL),
            machineImage: ec2.MachineImage.latestAmazonLinux2(),
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            role: ec2Role,
        });
        // Create private subnet and EC2 instance
        const privateIsolatedSubnet = vpc.privateSubnets[1];
        const privateIsolatedInstance = new ec2.Instance(this, "PrivateInstance", {
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.SMALL),
            machineImage: ec2.MachineImage.latestAmazonLinux2(),
            vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_ISOLATED },
            role: ec2Role,
        });
        //Create Systems Manager VPC endpoint
        const ssmVpcEndpoint = new ec2.InterfaceVpcEndpoint(this, "SSMEndpoint", {
            service: ec2.InterfaceVpcEndpointAwsService.SSM,
            vpc,
            privateDnsEnabled: true,
            subnets: vpc.selectSubnets({
                subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
                onePerAz: true,
            }),
        });
        // Output the Systems Manager VPC endpoint ID
        new cdk.CfnOutput(this, "SSMEndpointId", {
            value: ssmVpcEndpoint.vpcEndpointId,
        });
    }
}
exports.SessionManagerDemoStack = SessionManagerDemoStack;
const app = new cdk.App();
new SessionManagerDemoStack(app, "SessionManagerDemoStack");
//# sourceMappingURL=data:application/json;base64,